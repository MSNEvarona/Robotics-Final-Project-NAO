// Generated by gencpp from file nao_matador/Audio_msgsResponse.msg
// DO NOT EDIT!


#ifndef NAO_MATADOR_MESSAGE_AUDIO_MSGSRESPONSE_H
#define NAO_MATADOR_MESSAGE_AUDIO_MSGSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace nao_matador
{
template <class ContainerAllocator>
struct Audio_msgsResponse_
{
  typedef Audio_msgsResponse_<ContainerAllocator> Type;

  Audio_msgsResponse_()
    : playing(false)  {
    }
  Audio_msgsResponse_(const ContainerAllocator& _alloc)
    : playing(false)  {
  (void)_alloc;
    }



   typedef uint8_t _playing_type;
  _playing_type playing;





  typedef boost::shared_ptr< ::nao_matador::Audio_msgsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::nao_matador::Audio_msgsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct Audio_msgsResponse_

typedef ::nao_matador::Audio_msgsResponse_<std::allocator<void> > Audio_msgsResponse;

typedef boost::shared_ptr< ::nao_matador::Audio_msgsResponse > Audio_msgsResponsePtr;
typedef boost::shared_ptr< ::nao_matador::Audio_msgsResponse const> Audio_msgsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::nao_matador::Audio_msgsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::nao_matador::Audio_msgsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace nao_matador

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nao_matador': ['/home/nao/group_b_final_project/devel/share/nao_matador/msg', '/home/nao/group_b_final_project/src/nao_matador/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::nao_matador::Audio_msgsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::nao_matador::Audio_msgsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nao_matador::Audio_msgsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::nao_matador::Audio_msgsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nao_matador::Audio_msgsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::nao_matador::Audio_msgsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::nao_matador::Audio_msgsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dc98adb8855744fb8fbdc16d8a552f8e";
  }

  static const char* value(const ::nao_matador::Audio_msgsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdc98adb8855744fbULL;
  static const uint64_t static_value2 = 0x8fbdc16d8a552f8eULL;
};

template<class ContainerAllocator>
struct DataType< ::nao_matador::Audio_msgsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nao_matador/Audio_msgsResponse";
  }

  static const char* value(const ::nao_matador::Audio_msgsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::nao_matador::Audio_msgsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
bool playing\n\
";
  }

  static const char* value(const ::nao_matador::Audio_msgsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::nao_matador::Audio_msgsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.playing);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Audio_msgsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::nao_matador::Audio_msgsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::nao_matador::Audio_msgsResponse_<ContainerAllocator>& v)
  {
    s << indent << "playing: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.playing);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NAO_MATADOR_MESSAGE_AUDIO_MSGSRESPONSE_H
